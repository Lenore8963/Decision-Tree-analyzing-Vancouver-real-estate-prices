# -*- coding: utf-8 -*-
"""metricsreport.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJB-CsXOlpmXe02z48OTmhCTEbWTgsu5
"""

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np
import joblib

def load_data(csv_path):
    data = pd.read_csv(csv_path)
    features = data.drop(columns=['Sold_price'])
    target = data['Sold_price']
    return features, target

def train_model(x_train, y_train, max_depth=None):
    model = DecisionTreeRegressor(max_depth=max_depth, random_state=0)
    model.fit(x_train, y_train)
    return model

def mean_percentage_error(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

# Path to the dataset
csv_path = 'final_data_test.csv'

# Load and preprocess the data
features, target = load_data(csv_path)

# Split the data
x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0)

# Define a range of depths to test
max_depths = range(1, 11)

# Prepare lists to store the metrics
depths = []
mses = []
maes = []
mpes = []
r2_scores = []

# Train and evaluate the model for each depth
for depth in max_depths:
    model = train_model(x_train, y_train, max_depth=depth)
    predictions = model.predict(x_test)

    mse = mean_squared_error(y_test, predictions)
    mae = mean_absolute_error(y_test, predictions)
    mpe = mean_percentage_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)

    depths.append(depth)
    mses.append(mse)
    maes.append(mae)
    mpes.append(mpe)
    r2_scores.append(r2)

# Tabulate the results as a DataFrame
results_df = pd.DataFrame({
    'Max Depth': depths,
    'MSE': mses,
    'MAE': maes,
    'MPE (%)': mpes,
    'R^2 Score': r2_scores
})

# Print the DataFrame
print(results_df.to_string(index=False))

# Save the DataFrame to a CSV file for further analysis if needed
results_df.to_csv('model_performance_metrics.csv', index=False)

print("Completed model testing for different depths with performance metrics.")